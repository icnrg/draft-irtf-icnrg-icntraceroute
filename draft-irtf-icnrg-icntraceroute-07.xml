<?xml version='1.0' encoding='utf-8'?>
<?xml-stylesheet type='text/xsl' href='rfc2629.xslt' ?>
<?rfc strict="yes" ?>
<?rfc compact="yes" ?>
<?rfc subcompact="no" ?>

<rfc
	xmlns:xi="http://www.w3.org/2001/XInclude"
	category="exp"
	docName="draft-irtf-icnrg-icntraceroute-07"
	ipr="trust200902"
	obsoletes=""
	updates=""
	submissionType="IRTF"
	xml:lang="en"
	tocInclude="true"
	tocDepth="4"
	symRefs="true"
	sortRefs="true"
	version="3">


<front>

  <title abbrev="ICN Traceroute">ICN Traceroute Protocol Specification</title>
  <seriesInfo name="Internet-Draft" value="draft-irtf-icnrg-icntraceroute-07"/>
  
  <author fullname="Spyridon Mastorakis" initials="S" surname="Mastorakis">
      <organization>University of Nebraska at Omaha</organization>
      <address>
        <postal>
          <street/>
          <!-- Reorder these if your country does things differently -->
            <city>Omaha</city>
          <region>NE</region>
          <code/>
          <country>US</country>
        </postal>
        <email>smastorakis@unomaha.edu</email>
        <!-- uri and facsimile elements may also be added -->
    </address>
    </author>

  <author fullname="Dave Oran" initials="D" surname="Oran">
      <organization>Network Systems Research and Design</organization>
      <address>
        <postal>
          <street/>
          <!-- Reorder these if your country does things differently -->
            <city>Cambridge</city>
          <region>MA</region>
          <code/>
          <country>US</country>
        </postal>
        <email>daveoran@orandom.net</email>
        <!-- uri and facsimile elements may also be added -->
    </address>
  </author>

  <author fullname="Ilya Moiseenko" initials="I" surname="Moiseenko">
      <organization>Apple Inc</organization>
      <address>
        <postal>
          <street/>
          <!-- Reorder these if your country does things differently -->
            <city>Cupertino</city>
          <region>CA</region>
          <code/>
          <country>US</country>
        </postal>
        <email>iliamo@mailbox.org</email>

    </address>
  </author>  
  
  <author fullname="Jim Gibson" initials="J" surname="Gibson">
      <organization>Unaffiliated</organization>
      <address>
        <postal>
          <street/>

            <city>Belmont</city>
          <region>MA</region>
          <code/>
          <country>US</country>
        </postal>
        <email>jcgibson61@gmail.com</email>
    </address>
  </author>

  <author fullname="Ralph Droms" initials="R" surname="Droms">
      <organization>Unaffiliated</organization>
      <address>
        <postal>
          <street/>
          <city>Hopkinton</city>
          <region>MA</region>
          <code/>
          <country>US</country>
        </postal>
        <email>rdroms.ietf@gmail.com</email>
    </address>
  </author>

  <date  year="2022"/>

  <area>IRTF</area>
  <workgroup>ICNRG</workgroup>

  <keyword>ICN</keyword>
  <keyword>Network Management</keyword>

  <abstract>
    <t>This document presents the design of an ICN Traceroute protocol. This includes the operation of both the client and the forwarder.</t>
    
	<t>This document is a product of the Information-Centric Networking Research Group (ICNRG) of the IRTF.</t>
  </abstract>
  
</front>

<middle>
  <section><name>Introduction</name>
    <t>In TCP/IP, routing and forwarding are based on IP addresses. To ascertain
      the route to an IP address and to measure the transit delays, the traceroute
      utility is commonly used. In ICN, routing and forwarding are based on name prefixes.
      To this end, the problem of ascertaining the characteristics (i.e., transit
      forwarders and delays) of at least one of the available routes to a name
      prefix is a fundamendal requirement for instrumentation and network management.</t>

	<t>In order to carry out meaningful experimentation and deployment of ICN				protocols, tools to manage and debug the operation of ICN architectures and				protocols are needed analogous to ping and traceroute used for TCP/IP.				This document describes the design of a management and debugging protocol				analogous to the traceroute protocol of TCP/IP, which will aid the experimental deployment of ICN protocols. As the community continues its	experimentation with ICN architectures and protocols, the design of ICN Traceroute might change accordingly. ICN Traceroute is designed as a tool to troubleshoot ICN architectures and protocols. As such, this document is classified as an experimental RFC.</t>
	
	<t>This specification uses the terminology defined in <xref target="RFC8793"/>.</t>

	<t>This document is not an Internet Standards Track specification; it is					published for examination, experimental implementation, and evaluation.					This document defines an Experimental Protocol for the Internet	community. This document is a product of the Internet Research Task	Force (IRTF). The IRTF publishes the results of Internet-related	research and development activities. These results might not be suitable for deployment. This RFC represents the consensus of the Information-Centric Networking Research Group of the Internet Research Task Force (IRTF). Documents approved for publication by the IRSG are not candidates for any level of Internet Standard; see	Section 2 of RFC 7841.</t>

  	<section><name>Requirements Language</name>
    	<t>The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT",        "SHOULD", "SHOULD NOT", "RECOMMENDED", "MAY", and "OPTIONAL" in this document are to be interpreted as described in <xref target="RFC2119"/>.</t>
    </section>
  </section>

  <section><name>Background on IP-Based Traceroute Operation</name>
      <t>In IP-based networks, traceroute is based on the expiration of the Time To Live (TTL) IP header field. Specifically, a traceroute client sends consecutive packets (depending on the implementation and the user-specified behavior such packets can be either UDP datagrams, ICMP Echo Request or TCP SYN packets) with a TTL value increased by 1, essentially performing a expanding ring search. In this way, the first IP packet sent will expire at the first router along the path, the second IP packet at the second router along the path, etc, until the router (or host) with the specified destination IP address is reached. Each router along the path towards the destination, responds by sending back an ICMP Time Exceeded packet, unless explicitly prevented from doing so by a security policy.</t>

      <t>The IP-based traceroute utility operates on IP addresses, and in particular
      depends on the IP packets having source IP addresses that are used as
      the destination address for replies. Given that ICN forwards based on names
      rather than destination IP addresses, that the names do not
      refer to unique endpoints (multi-destination), and that the packets
      do not contain source addresses, a substantially different approach is needed.</t>
  </section>

    <section anchor="challenges" numbered="true" toc="default">
      <name>Traceroute Functionality Challenges and Opportunities in ICN</name>
      <t> In the NDN and CCN
      protocols, the communication paradigm is based exclusively on named
      objects. An Interest is forwarded across the network based on its name.
      Eventually, it retrieves a content object either from a producer
      application or some forwarder's Content Store (CS).</t>

      <t>An ICN network differs from an IP network in at least 4 important ways:</t>
      <ul spacing="normal">
        <li>IP identifies interfaces to an IP network with a fixed-length address, and delivers IP packets to one or more interfaces. ICN identifies units of data in the network with a variable length name consisting of a hierarchical list of components.</li>
        
        <li>An IP-based network depends on the IP packets having source IP	      addresses that are used as the destination address for replies. On the other hand, ICN Interests do not have source addresses and they are forwarded based on names, which do not refer to a unique end-point. Data packets follow the reverse path of the Interests based on hop-by-hop state created during Interest forwarding.</li>

        <li>An IP network supports multi-path, single destination, stateless packet forwarding and delivery via unicast, a limited form of multi-destination selected delivery with anycast, and group-based multi-destination delivery via multicast. In contrast, ICN supports multi-path and multi-destination stateful Interest forwarding and multi-destination data delivery to units of named data.  This single forwarding semantic subsumes the functions of unicast, anycast, and	      multicast.  As a result, consecutive (or retransmitted) ICN Interest messages may be forwarded through an ICN network along different paths, and may be forwarded to different data sources (e.g., end-node applications, in-network storage) holding a copy of the requested unit of data. The ability to discover multiple available	      (or potentially all) paths towards a name prefix is a desirable capability for an ICN traceroute protocol, since it can be beneficial for congestion control purposes. Knowing the number of available paths for a name can also be useful in cases that Interest forwarding based on application semantics/preferences is desirable.</li>
        
        <li>In the case of multiple Interests with the same name arriving at a forwarder, a number of Interests may be aggregated in a common Pending Interest Table (PIT) entry. Depending on the lifetime of a PIT entry, the round-trip time an Interest-Data exchange might significantly vary (e.g., it might be shorter than the full round-trip time to reach the original content producer). To this end, the round-trip time experienced by consumers might also vary even under constant network load.</li>
      </ul>

      <t>These differences introduce new challenges, new opportunities and new
      requirements in the design of ICN traceroute. Following this communication
      model, a traceroute client should be able to express traceroute requests
      directed to a name prefix and receive responses.</t>

      <t>Our goals are the following:</t>
      <ul>
        <li>Trace one or more paths towards an ICN forwarder (for troubleshooting	purposes).</li>
        <li>Trace one or more paths along which an named data of an application can be reached in the sense that Interest packets can be forwarded toward it.</li>
        <li>Test whether a specific named object is cached in some on-path CS, and, if so, trace the path towards it and return the identity of the corresponding forwarder.</li>
        <li>Perform transit delay network measurements.</li>
      </ul>

      <t>To this end, a traceroute target name can represent:</t>
      <ul>
        <li>An administrative name that has been assigned to a forwarder. Assigning a name to a forwarder implies the presence of a management application running locally, which handles Operations, Administration and Management (OAM) operations.</li>
        <li>A name that includes an application's namespace as a prefix.</li>
        <li>A named object that might reside in some in-network storage.</li>
      </ul>

      <t>In order to provide stable and reliable diagnostics, it is desirable that the
      packet encoding of a traceroute request enable the forwarders to distinguish this request from a normal Interest, while also preserving forwarding behavior as similar as possible to that for an Interest packet. In the same way, the encoding of a traceroute reply should allow for processing as similar as possible to that of a data packet by the forwarders.</t>

      <t>The term "traceroute session" is used for an iterative process during which an endpoint client application generates a number of traceroute requests to successively traverse more distant hops in the path until it receives a final traceroute reply from a forwarder. It is desirable that ICN traceroute be able to discover a number of paths towards the expressed prefix within the same session or subsequent sessions. To discover all the hops in a path, we need a mechanism (Interest Steering) to steer requests along different paths. Such a capability was initially published in  <xref target="PATHSTEERING" format="default"/> and has been specified for CCNx and NDN in <xref target="I-D.irtf-icnrg-pathsteering"/>.</t>

      <t>It is also important, in the case of traceroute requests for the same prefix from different sources, to have a mechanism to avoid aggregating those requests in the PIT. To this end, we need some encoding in the traceroute requests to make each request for a common prefix unique, and hence avoid PIT aggregation and further enabling the exact matching of a response with a particular traceroute packet.</t>

      <t>The packet types and format are presented in <xref target="format"/>.
      The procedures, e.g. the procedures for determining and indicating that
      a destination has been reached, are specified in <xref target="forwarder"/>.</t>
    </section>

    <section anchor="format"><name>ICN Traceroute CCNx Packet Format</name>
      <t>In this section, we present the CCNx packet format <xref target="RFC8609"/> of ICN traceroute, where messages exist within outermost containments (packets). Specifically, we propose two types of traceroute packets, a traceroute request and a traceroute reply packet type. </t>

      <section><name>ICN Traceroute Request CCNx Packet Format</name>
        <t>The format of the traceroute request packet is presented below:</t>

        <figure align="center">
        <name>Traceroute Request CCNx Packet Format</name>
        <artwork align="left" name="" type="" alt=""><![CDATA[
 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1
 +---------------+---------------+---------------+---------------+
 |               |               |                               |
 |    Version    |   TrRequest   |         PacketLength          |
 |               |               |                               |
 +---------------+---------------+---------------+---------------+
 |               |               |               |               |
 |    HopLimit   |    Reserved   |     Flags     |  HeaderLength |
 |               |               |               |               |
 +---------------+---------------+---------------+---------------+
 /                                                               /
 /                        Path label TLV                         /
 /                                                               /
 +---------------+---------------+---------------+---------------+
 |                                                               |
 |               Traceroute Request Message TLVs                 |
 |                                                               |
 +---------------+---------------+---------------+---------------+
]]></artwork>
        </figure>

        <t>The existing packet header fields have similar functionality to the header fields of a CCNx Interest packet. The value of the packet type field is TrRequest. The exact numeric value of this field type is to be assigned in the Packet Type IANA Registry for CCNx (see section 4.1 of <xref target="RFC8609" format="default"/>.</t>

        <t>Compared to the typical format of a CCNx packet header <xref target="RFC8609"/>, there is a new  optional fixed header added to the packet header:</t>

        <ul>
          <li>A Path Steering hop-by-hop header TLV, which is constructed hop-by-hop	 in the traceroute reply and included in the traceroute request to steer consecutive requests expressed by a client towards a common or different forwarding paths. The Path label TLV is specified in <xref target="I-D.irtf-icnrg-pathsteering"/> </li>
        </ul>

        <t>The message of a traceroute request is presented below:</t>

        <figure align="center">
        <name>Traceroute Request Message Format</name>
        <artwork align="left" name="" type="" alt=""><![CDATA[
 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1
 +---------------+---------------+---------------+---------------+
 |                               |                               |
 |        MessageType = 1        |          MessageLength        |
 |                               |                               |
 +---------------+---------------+---------------+---------------+
 |                                                               |
 |                           Name TLV                            |
 |                                                               |
 +---------------+---------------+---------------+---------------+
]]></artwork>
        </figure>

        <t>The traceroute request message is of type Interest in order to leverage the Interest forwarding behavior provided by the network. The Name TLV has the structure described in <xref target="RFC8609"/>. The name consists of the target (destination) prefix appended with a nonce typed name component as its last component (to avoid Interest aggregation and allow exact matching of requests with responses). The value of this TLV is a 64-bit nonce.</t>

       <figure align="center">
       <name>Name Nonce Typed Component TLV</name>
        <artwork align="left" name="" type="" alt=""><![CDATA[
 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1
 +---------------+---------------+---------------+---------------+
 |                               |                               |
 |        Name_Nonce_Type        |      Name_Nonce_Length = 8    |
 |                               |                               |
 +---------------+---------------+---------------+---------------+
 |                                                               |
 |                                                               |
 |                                                               |
 |                        Name_Nonce_Value                       |
 |                                                               |
 |                                                               |
 +---------------+---------------+---------------+---------------+
]]></artwork>
       </figure>
    </section>

    <section anchor="CCNxReply">
        <name>Traceroute Reply CCNx Packet Format</name>
        <t>The format of a traceroute reply packet is presented below:</t>

        <figure align="center">
        <name>Traceroute Reply CCNx Packet Format</name>
        <artwork align="left" name="" type="" alt=""><![CDATA[
 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1
 +---------------+---------------+---------------+---------------+
 |               |               |                               |
 |    Version    |    TrReply 	 |          PacketLength         |
 |               |               |                               |
 +---------------+---------------+---------------+---------------+
 |                               |               |               |
 |            Reserved           |     Flags     | HeaderLength  |
 |                               |               |               |
 +---------------+---------------+---------------+---------------+
 |                                                               |
 |                       Path label TLV                          |
 |                                                               |
 +---------------+---------------+---------------+---------------+
 |                                                               |
 |                 Traceroute Reply Message TLVs                 |
 |                                                               |
 +---------------+---------------+---------------+---------------+
]]></artwork>
        </figure>

        <t>The header of a traceroute reply consists of the header fields of a CCNx Content  Object and a hop-by-hop path steering TLV. The value of the packet type field is TrReply. The exact numeric value of this field type is to be assigned in the Packet Type IANA Registry for CCNx (see section 4.1 of <xref target="RFC8609"/>.</t>

        <t>A traceroute reply message is of type Content Object, contains a Name TLV (name of the corresponding traceroute request), a PayloadType TLV and an ExpiryTime TLV with a value of 0 to indicate that replies must not be returned from network caches.</t>

       <figure align="center">
       <name>Traceroute Reply Message Format</name>
        <artwork align="left" name="" type="" alt=""><![CDATA[
 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1
 +---------------+---------------+---------------+---------------+
 |                               |                               |
 |        MessageType = 2        |          MessageLength        |
 |                               |                               |
 +---------------+---------------+---------------+---------------+
 |                                                               |
 |                           Name TLV                            |
 |                                                               |
 +---------------+---------------+---------------+---------------+
 |                                                               |
 |                        PayloadType TLV                        |
 |                                                               |
 +---------------+---------------+---------------+---------------+
 |                                                               |
 |                         ExpiryTime TLV                        |
 |                                                               |
 +---------------+---------------+---------------+---------------+
]]></artwork>
        </figure>

        <t>The PayloadType TLV is presented below. It is of type T_PAYLOADTYPE_DATA, and the data schema consists of 3 TLVs:</t>
        <ol type="%d)">
        	<li>the name of the sender of this reply (with the same structure as a CCNx Name TLV),</li>
        	<li>the sender's signature of their own name (with the same structure as a CCNx ValidationPayload TLV),</li>
        	<li>a TLV with return codes to indicate whether the request was satisfied due to the existence of a local application, a CS hit or a match with a forwarder's name, or the HopLimit value of the corresponding request reached 0.</li>
        </ol>

        <figure align="center">
        <name>Traceroute Reply Message Format</name>
        <artwork align="left" name="" type="" alt=""><![CDATA[
 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1
 +---------------+---------------+---------------+---------------+
 |                               |                               |
 |       T_PAYLOADTYPE_DATA      |             Length            |
 |                               |                               |
 +---------------+---------------+---------------+---------------+
 |                                                               |
 |                      Sender's Name TLV                        |
 |                                                               |
 +---------------+---------------+---------------+---------------+
 |                                                               |
 |                    Sender's Signature TLV                     |
 |                                                               |
 +---------------+---------------+---------------+---------------+
 |                                                               |
 |                       TrReply Code TLV                        |
 |                                                               |
 +---------------+---------------+---------------+---------------+

            ]]></artwork>
        </figure>

        <t>The goal of including the name of the sender in the reply is to enable the user to reach this entity directly to ask for further management/administrative information using generic Interest-Data exchanges or by employing a more comprehensive management tool such as <xref target="I-D.irtf-icnrg-ccninfo" format="default">CCNInfo</xref> after a successful verification of the sender's name.</t>

        <t>The structure of the TrReply Code TLV is presented below (16-bit value).  The assigned values are the following:</t>
        <ol type="%d:" spacing="normal">
          <li>Indicates that the target name matched the administrative name of a forwarder (as served	 by its internal management application).</li>
          <li>Indicates that the target name matched a prefix served by an application (other than the internal management application of a forwarder).</li>
          <li>Indicates that the target name matched the name of an object in a forwarder's CS.</li>
          <li>Indicates that the the Hop limit reached the 0 value.</li>
        </ol>

        <figure align="center">
        <name>TrReply Code TLV</name>
        <artwork align="left" name="" type="" alt=""><![CDATA[
 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1
 +---------------+---------------+---------------+---------------+
 |                               |                               |
 |       TrReply_Code_Type       |    TrReply_Code_Length = 2    |
 |                               |                               |
 +---------------+---------------+---------------+---------------+
 |                                                               |
 |                      TrReply_Code_Value                       |
 |                                                               |
 +---------------+---------------+---------------+---------------+
]]></artwork>
        </figure>
    </section>
  </section>

    <section><name>ICN Traceroute NDN Packet Format</name>
      <t>In this section, we present the ICN traceroute Request and Reply Format according to the NDN packet specification <xref target="NDNTLV"/>.</t>

      <section><name>ICN Traceroute Request NDN Packet Format</name>
        <t>A traceroute request is encoded as an NDN Interest packet. Its format is the following:</t>

        <figure align="center">
        <name>Traceroute Request NDN Packet Format</name>
        <artwork align="left" name="" type="" alt=""><![CDATA[
	TracerouteRequest = INTEREST-TYPE TLV-LENGTH
              Name
              MustBeFresh
              Nonce
              HopLimit
              ApplicationParameters?
	        ]]></artwork>
        </figure>

        <t>The name of a request consists of the target name, a nonce value (it can be the value of the Nonce field) and the suffix "traceroute" to denote that this Interest is a traceroute request (added as a KeywordNameComponent). When the "ApplicationParameters" element is present, a ParametersSha256DigestComponent is added as the last name component.</t>
        
        <t>A traceroute request MAY carry a Path label TLV in the <xref target="NDNLPv2">NDN Link Adaptation Protocol</xref> as specified in <xref target="I-D.irtf-icnrg-pathsteering"/>.</t>
        
        <t>Since the NDN packet format does not provide a mechanism to prevent the network from caching specific  data packets, we instead use the MustBeFresh selector for requests (in combination with a Freshness Period TLV of value 1 for replies) to avoid fetching cached traceroute replies with a freshness period that has expired <xref target="REALTIME"/>.</t>

      </section>
      <section numbered="true" toc="default">
        <name>Traceroute Reply NDN Packet Format</name>
        <t>A traceroute reply is encoded as an NDN Data packet. Its format is the following:</t>

        <figure align="center">
        <name>Traceroute Reply NDN Packet Format</name>
        <artwork align="left" name="" type="" alt=""><![CDATA[
	TracerouteReply = DATA-TLV TLV-LENGTH
                        Name
                        MetaInfo
                        Content
                        Signature
	        ]]></artwork>
        </figure>

        <t>A traceroute reply MAY carry a Path label TLV in the <xref target="NDNLPv2">NDN Link Adaptation Protocol</xref>	as specified in <xref target="I-D.irtf-icnrg-pathsteering"/>, since it might be modified in a hop-by-hop fashion by the forwarders along the reverse path.</t>

        <t>The name of a traceroute reply is the name of the corresponding traceroute request, while the format of the MetaInfo field is the following:</t>

        <figure align="center">
        <name>MetaInfo TLV</name>
        <artwork align="left" name="" type="" alt=""><![CDATA[
      MetaInfo = META-INFO-TYPE TLV-LENGTH
               ContentType
               FreshnessPeriod
	             ]]></artwork>
        </figure>

        <t>The value of the ContentType TLV is 0. The value of the FreshnessPeriod TLV is 1, so that the replies are treated as stale data (almost instantly) as they are received by a forwarder.</t>

        <t>The content of a traceroute reply consists of the following 2 TLVs: Sender's name (an NDN Name TLV) and Traceroute Reply Code. There is no need to have a separate TLV for the sender's signature in the content of the reply, since every NDN data packet carries the signature of the data producer.</t>

        <t>The Traceroute Reply Code TLV format is the following (with the values specified in <xref target="CCNxReply"/>):</t>

        <figure align="center">
        <name>Traceroute Reply Code TLV</name>
        <artwork align="left" name="" type="" alt=""><![CDATA[
	TrReplyCode = TRREPLYCODE-TLV-TYPE TLV-LENGTH 2*OCTET
	]]></artwork>
        </figure>
      </section>

    </section>
    <section anchor="forwarder" numbered="true" toc="default">
      <name>Forwarder Operation</name>
      <t>When a forwarder receives a traceroute request, the hop limit value is
	checked and decremented and the target name (i.e, the name of the traceroute request without the last nonce name component as well as the suffix
	"traceroute" and the ParametersSha256DigestComponent in the case of a request with the NDN packet format) is extracted.</t>

      <t>If the HopLimit has not expired (its value is greater than 0), the forwarder will forward the request upstream based on CS lookup, PIT creation, LPM lookup and the path steering value, if present. If no valid next-hop is found, an	InterestReturn indicating "No Route" in the case of CCNx or a network NACK in the case of NDN	is sent downstream.</t>

      <t>If the HopLimit value is equal to zero, the forwarder generates a traceroute reply.	This reply includes the forwarder's	administrative name and signature, and a Path label TLV. This TLV initially has a	null value since the traceroute reply originator does not	forward the request and, thus, does not make a path choice. The reply will also	include the corresponding TrReply Code TLV.</t>

      <t>A traceroute reply will be the final reply of a traceroute session if any of the following conditions are met:</t>

      <ul spacing="normal">
        <li>If a forwarder has been given one or more administrative names,
	   the target name matches one of them.</li>
        <li>The target name exactly matches the name of a content-object residing in the forwarder's CS (unless the traceroute client application has chosen not to receive replies due to CS hits as specified in <xref target="app-additional" format="default"/>).</li>
        <li>The target name matches (in a Longest Prefix Match manner) a FIB entry with an outgoing face referring to a local application.</li>
      </ul>

      <t>The TrReply Code TLV value of the reply is set to indicate the specific condition that was met. If none of those conditions was met, the TrReply Code is set to 4 to indicate that the hop limit value	reached 0.</t>

      <t>A received traceroute reply will be matched to an existing PIT entry as usual. On	the reverse path, the path steering TLV of a reply will be updated by each forwarder to encode its choice of next-hop(s). When included in subsequent requests, this path steering TLV allows the forwarders to steer the requests along the same path.</t>
    </section>

    <section anchor="local" numbered="true" toc="default">
      <name>Protocol Operation For Locally-Scoped Namespaces</name>
      <t>In this section, we elaborate on 2 alternative design approaches in cases that the traceroute target prefix corresponds to a locally-scoped namespace not directly routable from the client's local network.</t>

      <t>The first approach leverages the NDN Link Object <xref target="SNAMP" format="default"/>. Specifically, the traceroute client attaches to the expressed request a LINK Object that contains a number of routable name prefixes, based on which the request can be forwarded	across the Internet until it reaches a network region, where the request name itself is routable. A LINK Object is created and signed by a data producer allowed to publish data under a locally-scoped namespace. The way that a client retrieves a LINK Object depends on various network design factors and is out of the scope of the current draft.</t>

      <t>Based on the current deployment of the LINK Object by the NDN team, a forwarder at the border of the region, where an Interest name becomes routable has to remove the LINK Object from the incoming Interests. The Interest state maintained along the entire forwarding path is based on the	Interest name regardless of whether it was forwarded based on this name or a prefix in the LINK Object.</t>

      <t>The second approach is based on prepending a routable prefix to the locally-scoped name. The resulting prefix will be the name of the traceroute requests expressed by the client. In this way, a request will be forwarded based on the routable part of its name. When it reaches the network region where the original locally-scoped name is routable, the border forwarder rewrites the request name and deletes its routable part. There are two conditions for a forwarder to perform this rewriting operation	on a request:</t>
      <ol type="%d)">
      	<li>the routable part of the request name matches a routable name of the network region adjacent to the forwarder (assuming that a forwarder is aware of those names), and </li>
      	<li>the remaining part of the request name is routable across the	network region of this forwarder.</li>
	</ol>

    <t>The state maintained along the path, where the locally-scoped name is not routable, is based on the routable prefix along with the locally-scoped prefix, while within the network region that the locally-scoped prefix is routable is based only on it. To ensure that the generated replies will
	reach the client, the border forwarder has also to rewrite the name of a reply and prepend the routable prefix of the corresponding request.</t>
    </section>

    <section numbered="true" toc="default">
      <name>Security Considerations</name>
      <t>A reflection attack could occur in the case of a traceroute reply with the CCNx packet format  if a compromised forwarder includes in the reply the name of a victim forwarder.  This could redirect the future administrative traffic towards the victim. To foil such reflection attacks, the forwarder that generates a traceroute reply MUST sign the name included in the payload. In this way, the client is able to verify that the included name is legitimate and refers to the forwarder that generated the reply. Alternatively, the forwarder could include in the reply payload their routable prefix(es) encoded as a signed NDN Link Object <xref target="SNAMP" format="default"/>.</t>

      <t>This approach does not protect against on-path attacks, where a compromised forwarder that receives a traceroute reply replaces the forwarder's name and the signature in the message with its own name and signature to make the client believe that the reply was generated by the compromised forwarder. To foil such attack scenarios, a forwarder can sign the reply message itself. In such cases, the forwarder does not have to sign its own name in reply message, since the message signature protects the message as a whole and will be invalidated in the case of an on-path attack. Additionally, a forwarder could swap out the name of a traceroute request with the name of its choosing. In this case, however, the response with the spoofed name will not be received by a client, since the change of name would invalidate the state in PIT on the path back to the client.</t>

      <t>Signing each traceroute reply message can be expensive and can potentially lead to computation attacks against forwarders. To mitigate such attack scenarios, the processing of traceroute requests and the generation of the replies SHOULD be handled by a separate management
      application running locally on each forwarder. Serving traceroute replies therefore is thereby separated from load on the forwarder itself. The approaches used by ICN applications to manage load may also apply to the
      forwarder's  management application.</t>

      <t>Interest flooding attack amplification is possible in the case of the second approach to deal with locally-scoped namespaces described in <xref target="local" format="default"/>. A border forwarder will have to maintain extra state to prepend the correct routable prefix to the name of an outgoing reply, since the forwarder might be attached to multiple network regions (reachable under different prefixes) or a network region attached to this forwarder might be reachable under multiple routable prefixes.</t>

      <t>We also note that traceroute requests have the same privacy characteristics as regular Interests.</t>
    </section>

		<section anchor="IANA" numbered="true" toc="default">
			<name>IANA Considerations</name>
			<t>The exact numeric values of the field types of Traceroute requests and Traceroute replies are to be assigned in the Packet Type IANA Registry for CCNx
			(see section 4.1 of <xref target="RFC8569" format="default"/>. </t>
		</section>
</middle>

<back>
  <references><name>References</name>
  
	  <references><name>Normative References</name>
	    <?rfc include="reference.RFC.2119.xml"?>
    	<?rfc include="reference.RFC.8569.xml"?>
    	<?rfc include="reference.RFC.8609.xml"?>
    	<?rfc include="reference.RFC.8793.xml"?>
	  </references>

    <references><name>Informative References</name>
	    <?rfc include="reference.I-D.irtf-icnrg-ccninfo.xml"?>
 		<?rfc include="reference.I-D.irtf-icnrg-pathsteering.xml"?>

        <reference anchor="NDNTLV" target="https://named-data.net/doc/NDN-packet-spec/current/">
          <front>
            <title>NDN Packet Format Specification.</title>
            <author surname="NDN Project Team">
              <organization/>
            </author>
            <date year="2021"/>
          </front>
        </reference>
        
		<reference anchor="NDNLPv2" target="https://redmine.named-data.net/projects/nfd/wiki/NDNLPv2">
           <front>
             <title>Named Data Networking Link Adaptation Protocol v2</title>
             <author surname="NDN team"/>
             <date>various</date>
           </front>
        </reference>

        <reference anchor="SNAMP">
          <front>
            <title>SNAMP: Secure namespace mapping to scale NDN forwarding</title>
            <author initials="A" surname="Afanasyev">
              <organization/>
            </author>
            <author surname="et al">
              <organization/>
            </author>
            <date year="2015"/>
          </front>
          <refcontent>IEEE Conference on Computer Communications Workshops (INFOCOM WKSHPS)</refcontent>
        </reference>

        <reference anchor="PATHSTEERING">
          <front>
            <title>Path switching in content centric and named data networks</title>
            <author initials="I" surname="Moiseenko">
              <organization/>
            </author>
            <author initials="D" surname="Oran">
              <organization/>
            </author>
            <date year="2017"/>
          </front>
          <refcontent>in Proceedings of the 4th ACM Conference on Information-Centric Networking</refcontent>
        </reference>

        <reference anchor="REALTIME">
          <front>
            <title>Real-Time Data Retrieval in Named Data Networking</title>
            <author initials="S" surname="Mastorakis">
              <organization/>
            </author>
            <author initials="P" surname="Gusev">
              <organization/>
            </author>
            <author initials="A" surname="Afanasyev">
              <organization/>
            </author>
            <author initials="L" surname="Zhang">
              <organization/>
            </author>
            <date year="2017"/>
          </front>
          <refcontent>in Proceedings of the 1st IEEE International Conference on Hot Topics in Information-Centric Networking</refcontent>
        </reference>
	</references>
  </references>

    <section anchor="app-additional">
      <name>Traceroute Client Application (Consumer) Operation</name>
      <t>This section is an informative appendix regarding the proposed traceroute client operation.</t>

      <t>The client application is responsible for generating traceroute requests for prefixes provided by users.</t>

      <t>The overall process can be iterative: the first traceroute request of each session will have a HopLimit of value 1 to reach the first hop forwarder, the second of value 2 to reach the second hop forwarder and so on and so forth.</t>

      <t>When generating a series of requests for a specific name, the first
       one will typically not include a Path label TLV, since no TLV value
       is known. After a traceroute reply containing a Path label TLV is received, each subsequent request might include the received path steering value in the Path label header TLV to drive the requests towards a common path as part of checking the network performance. To discover more paths, a client can omit the Path label TLV in future requests. Moreover, for each new traceroute request, the client has to generate a new nonce and record the time that the request was expressed. It will also set the lifetime of a request, which will have semantics similar to the lifetime of an Interest.</t>

      <t>Moreover, the client application might not wish to receive replies due to CS hits. In CCNx, a mechanism to achieve that would be to use a Content Object Hash Restriction TLV with a value of 0 in the payload of a traceroute request message. In NDN, the exclude filter selector can be used.</t>

      <t>When it receives a traceroute reply, the client would typically match the reply to a sent request and compute the round-trip time of the request. It should parse the Path label value and decode the reply's payload to parse the sender's name and signature. The client should verify that both the received message and the forwarder's name have been signed by the key of the forwarder, whose name is included in the payload of the reply (by fetching this forwarder's public key and verifying the contained signature). In the case that the client receives an TrReply Code TLV with a valid value, it can stop sending requests with increasing HopLimit values and potentially start a new traceroute session.</t>

      <t>In the case that a traceroute reply is not received for a request within a certain time interval (lifetime of the request), the client should time-out and send a new request with a new nonce value up to a maximum number of requests to be sent specified by the user.</t>
    </section>
  </back>
</rfc>
<!-- Change Log
v07 202-10-17	DRO Update references, fix NDN encoding
	-->
